#the number of steps to use when interpolating including start and finish 
#(0 means use pos_spacing and rot_spacing to calculate the number of steps, 
#anything ==1 or <0 will become 2, start and finish)
int32 num_steps

#the max angle distance (in any joint) before we declare that the path 
#is inconsistent
float64 consistent_angle

#how many steps between collision checks 
#(0 or 1 is check every step; 2 is every other, etc.)
int32 collision_check_resolution

#the number of steps in the plan (starting from the end and going backwards) 
#that can be invalid due to collisions or inconsistency before aborting 
#(0 is abort as soon as you find one, 1 is allow one and still 
#continue, -1 or >=num_steps to never abort early)
int32 steps_before_abort

#the max translation (m) to move the wrist between waypoints 
#(only used if num_steps is 0)
float64 pos_spacing

#the max rotation (rad) to move the wrist between waypoints 
#(only used if num_steps is 0)
float64 rot_spacing

#if this is 0, collisions won't be checked for 
#(returns non-collision aware IK solutions)
byte collision_aware

#if this is 1, the planner searches for an IK solution for the end 
#first, then works backwards from there
byte start_from_end

#a list of maximum joint velocities to use when computing times and 
#velocities for the joint trajectory (defaults to [.2]*7 if left empty)
float64[] max_joint_vels

#a list of maximum accelerations to use when computing times and 
#velocities for the joint trajectory (defaults to [.5]*7 if left empty)
float64[] max_joint_accs

---
